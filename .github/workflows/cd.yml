name: cd

on:
  push:
    branches:
      - main

jobs:
  cd:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.CD_YML }}" | base64 --decode > src/main/resources/application.yml

      - name: Create nginx.conf
        run: |
          mkdir -p nginx/conf.d
          echo "${{ secrets.NGINX_CONF }}" | base64 --decode > nginx/conf.d/nginx.conf

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew bootJar

      - name: Login DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Spring Boot Image
        run: | 
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: add GitHub Actions IP in Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-name ${{ secrets.AWS_SG_NAME }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Create .env file
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env

      - name: Send Nginx.conf
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "/nginx/conf.d/nginx.conf"
          target: "/home/ubuntu/nginx/conf.d"

      - name: Send docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.yml, .env"
          target: "/home/ubuntu"

      - name: Send deploy.sh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "deploy.sh"
          target: "/home/ubuntu"

      - name: Decode and Save SQLite Database
        run: |
          echo "${{ secrets.DATABASE_BASE64 }}" | base64 --decode > myoungari-new.db

      - name: Send New SQLite Database (Overwrite)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "myoungari-new.db"
          target: "/home/ubuntu/database"
          overwrite: true

      - name: Deploy at AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo chmod 666 /var/run/docker.sock
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest
            chmod 777 ./deploy.sh
            ./deploy.sh
            sudo docker image prune -f 

      - name: delete GitHub Actions IP in Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-name ${{ secrets.AWS_SG_NAME }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32